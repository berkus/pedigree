#
# Copyright (c) 2008 James Molloy, James Pritchett, Jörg Pfähler, Matthew Iselin
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

#
# Build targets. Change this to change which architecture you build for. Change requires a `make clean'.
# NB: jamesmol is JamesM's work machine.
#
[james]    MIPS_MALTA
[jamesmol] X64
[bluecode] X86
[pcmattman] ARM_VERSATILE

#
# Personalisation options.
#
[james]    DEBUGGER_QWERTY
[jamesmol] DEBUGGER_QWERTY
[bluecode] DEBUGGER_QWERTZ
[pcmattman] DEBUGGER_QWERTY

#[bluecode] SMP
#[bluecode] ACPI
#[bluecode] APIC
#[bluecode] MULTIPROCESSOR
#[bluecode] VERBOSE_MEMORY_MANAGER

#
# Targets.
#
X86: DEBUGGER BITS_32 LITTLE_ENDIAN KERNEL_STANDALONE X86_COMMON
X64: DEBUGGER BITS_64 LITTLE_ENDIAN KERNEL_STANDALONE X86_COMMON

MIPS32: DEBUGGER MIPS_COMMON BITS_32 LITTLE_ENDIAN
MIPS_MALTA: MIPS32
MIPS_MALTA_BONITO64: MIPS_MALTA
MIPS_AU1500: MIPS32
MIPS_AU1500_DB1500: MIPS_AU1500
MIPS_COMMON: OMIT_FRAMEPOINTER

# NB: ARM926E port not completed yet - DON'T USE THESE TARGETS
# 926E is the ARM CPU type used on the board, in future others
# will be supported
# TODO: remove the previous note when done
ARM926E: ARM_COMMON BITS_32 LITTLE_ENDIAN
ARM_VERSATILE: ARM926E
ARM_INTEGRATOR: ARM926E

#
# Extra rules.
#
DEBUGGER: DEBUGGER_RUN_AT_START DWARF

#
# Debug Information?
#
SMP: SMP_NOTICE SMP_ERROR
ACPI: ACPI_NOTICE ACPI_ERROR

#
# Additional Flags:
#  OPTIMIZE_X (X = 1, 2, 3, S)
#  STRIP_EXECUTABLE
#
