/*
 * Copyright (c) 2008 James Molloy, Jörg Pfähler, Matthew Iselin
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "Vga.h"

/// \warning 80x50 and 90x60 modes don't work, because we don't have an 8x8 font to install.
unsigned char g_80x25_text[] =
{
  /* MISC */
  0x67,
  /* SEQ */
  0x03, 0x00, 0x03, 0x00, 0x02,
  /* CRTC */
  0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F,
  0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x50,
  0x9C, 0x0E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3,
  0xFF,
  /* GC */
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00,
  0xFF,
  /* AC */
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
  0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
  0x0C, 0x00, 0x0F, 0x08, 0x00
};

unsigned char g_80x50_text[] =
{
  /* MISC */
  0x67,
  /* SEQ */
  0x03, 0x00, 0x03, 0x00, 0x02,
  /* CRTC */
  0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F,
  0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x01, 0x40,
  0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3,
  0xFF, 
  /* GC */
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00,
  0xFF, 
  /* AC */
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
  0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
  0x0C, 0x00, 0x0F, 0x08, 0x00,
};

unsigned char g_90x30_text[] =
{
  /* MISC */
  0xE7,
  /* SEQ */
  0x03, 0x01, 0x03, 0x00, 0x02,
  /* CRTC */
  0x6B, 0x59, 0x5A, 0x82, 0x60, 0x8D, 0x0B, 0x3E,
  0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x00,
  0xEA, 0x0C, 0xDF, 0x2D, 0x10, 0xE8, 0x05, 0xA3,
  0xFF,
  /* GC */
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00,
  0xFF,
  /* AC */
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
  0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
  0x0C, 0x00, 0x0F, 0x08, 0x00,
};

unsigned char g_90x60_text[] =
{
  /* MISC */
  0xE7,
  /* SEQ */
  0x03, 0x01, 0x03, 0x00, 0x02,
  /* CRTC */
  0x6B, 0x59, 0x5A, 0x82, 0x60, 0x8D, 0x0B, 0x3E,
  0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00,
  0xEA, 0x0C, 0xDF, 0x2D, 0x08, 0xE8, 0x05, 0xA3,
  0xFF,
  /* GC */
  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00,
  0xFF,
  /* AC */
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
  0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
  0x0C, 0x00, 0x0F, 0x08, 0x00,
};

unsigned char *g_pModeDescriptions[] = {g_80x25_text,
                                        g_80x50_text,
                                        g_90x30_text,
                                        g_90x60_text,
                                        0};
unsigned int g_pModeWidths[]  = {80,80,90,90,0};
unsigned int g_pModeHeights[] = {25,50,30,60,0};
#define NUM_MODES 4

#define REG_START 0x90000000
void write8(unsigned char data, unsigned int addr)
{
  volatile char *c = (volatile char*) (REG_START+addr);
  *c = data;
}

unsigned char read8(unsigned int addr)
{
  volatile char *c = (volatile char*) (REG_START+addr);
  return *c;
}

void vga_set_mode(int nMode)
{
  unsigned int i;
  unsigned char *pMode = g_pModeDescriptions[nMode];

  /* write MISCELLANEOUS reg */
  write8(*pMode, VGA_MISC_WRITE);
  pMode++;
  /* write SEQUENCER regs */
  for(i = 0; i < VGA_NUM_SEQ_REGS; i++)
  {
    write8(i, VGA_SEQ_INDEX);
    write8(*pMode, VGA_SEQ_DATA);
    pMode++;
  }
  /* unlock CRTC registers */
  write8(0x03, VGA_CRTC_INDEX);
  write8( read8(VGA_CRTC_DATA) | 0x80, VGA_CRTC_DATA);
  write8(0x11, VGA_CRTC_INDEX);
  write8( read8(VGA_CRTC_DATA) & ~0x80, VGA_CRTC_DATA);
  /* make sure they remain unlocked */
  pMode[0x03] |= 0x80;
  pMode[0x11] &= ~0x80;
  /* write CRTC pMode */
  for(i = 0; i < VGA_NUM_CRTC_REGS; i++)
  {
    write8(i, VGA_CRTC_INDEX);
    write8(*pMode, VGA_CRTC_DATA);
    pMode++;
  }
  /* write GRAPHICS CONTROLLER regs */
  for(i = 0; i < VGA_NUM_GC_REGS; i++)
  {
    write8(i, VGA_GC_INDEX);
    write8(*pMode, VGA_GC_DATA);
    pMode++;
  }
  /* write ATTRIBUTE CONTROLLER regs */
  for(i = 0; i < VGA_NUM_AC_REGS; i++)
  {
    (void)read8(VGA_INSTAT_READ);
    write8(i, VGA_AC_INDEX);
    write8(*pMode, VGA_AC_WRITE);
    pMode++;
  }
  /* lock 16-color palette and unblank display */
  (void)read8(VGA_INSTAT_READ);
  write8(0x20, VGA_AC_INDEX);
  
}

void vga_init()
{
  //vga_set_mode(0);
  
}