#summary Build system documentation

* ZOMG TEH WARNINGZ: Read the "Porting" section BEFORE updating to the new build system from the old one! (before revision r309)! *

=CMake=

The build system is currently being migrated to use CMake, the cross platform make. Don't be fooled - it's not a replacement for GNU Make - think of it more like an autoconf/automake that doesn't suck major balls.

==Obtaining==

I use some features of CMake which only appear in version 2.6. The current stable version is 2.4, so you'll have to compile from CVS for the moment. *You will need CMake 2.4 (or the latest stable) installed already in order to compile the CVS snapshot of CMake!*. Do this with `sudo apt-get install cmake` or something similar.

You will also need the curses development libraries: `sudo apt-get install libncurses-dev`.

Run these commandzors:

{{{
cvs -d :pserver:anonymous@www.cmake.org:/cvsroot/CMake login  <--- password "cmake"
cvs -d :pserver:anonymous@www.cmake.org:/cvsroot/CMake co CMake
mkdir tmp && cd CMake/tmp
cmake ../
make
sudo make install
}}}

Remember to close your terminal, as bash caches much stuff, so you won't see the new cmake straight away. Open a new terminal and run `cmake --version` - you should see 2.7 and a date string (today's date). Sweet - you're all running!

=Building=

cd into the build directory - Builds in place are teh shits - and run ccmake for the curses-based option editor.

{{{
cd build
ccmake ../
make
}}}

Which should dump a floppy.img or similar file in tmp/.

==CCmake==

CCmake is the curses cmake front end. Toggle options on and off by using the enter key - I have implemented a dependency system so you may not be able to turn some options off (when you press 'c' again they will turn back on!). Basically switch your desired options on then press 'c' until the 'g' option appears, then hit 'g' and type "make".

==The buildFlags file==

The buildFlags file has been revamped. It's similar to before in that it has a "if the left flag is set then set all the right flags" layout but you can now do several different things:

  * If you encapsulate a left hand flag in [], that flag is marked as "internal" and is not selectable in the GUI. Use this for internal flags that just make your life easier and you don't want toggleable.
  * If you encapsulate a left hand flag in {}, that flag is marked as "advanced". To access it in the GUI, a user has to press 't' (to toggle advanced options).
  * All flags are off by default. To change the default to 'On', prepend an asterisk to the start of a line.

To create a buildFlags.cmake file from your buildFlags file, cd into the pedigree root directory and run `scripts/parseBuildFlags.pl`.

=Porting from the old build system=

{{{
cp -r build/compilers /tmp
rm -rf /tmp/compilers/.svn
svn update   <--- this will fail, because it tries to remove build/ but it's not empty.
rm -rf build/
svn update <---- should now succeed.
cd compilers/
mv /tmp/compilers/* ./
}}}

You should now be ready to rock. _For God's sake don't decide to take shortcuts and `rm -rf build/` straight away - you'll trash the .svn directory and svn will shout at you for ever and never update._

=Things to watch out for / troubleshooting=

The first time you build a target such as MIPS or ARM, you may/will get an 'error' from cmake saying "Source file autogen.h could not be found". You may safely ignore this. autogen.h will be created when the kernel is created and before the bootloader is built, and once one exists cmake will cease to complain.