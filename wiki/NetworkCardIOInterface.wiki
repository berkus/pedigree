#summary Outlines the interface for I/O in network cards

== Required Reading ==

See DriverInterface for information about the driver I/O interface.

== Interface Definition ==

Network device drivers should inherit Network (machine/Network.h).

The provided (base) functionality is as follows:

  * getPacket: retrieves a packet from the front of the internal queue and returns it
  * getPacketSize: retrieves the size of the packet to be returned by getPacket (for buffer allocation)
  * sendPacket: sends a packet to the network
  * setStationInfo: sets information about this device, such as an IP
  * getStationInfo: retrieves the above information

Each device will also have internal methods and attributes in order to receive/send packets, that are device-specific and therefore not outlined here.

== Integration ==

All network device drivers register with the network stack during initialization. In comparison to AtaDisk (as an example), the network stack does not know about any cards until they register with it.

== Potential Problems & Questions ==

  * {get|set}StationInfo may only work with IPv4 addresses initially, as they fit into a uint32_t. Perhaps a structure for station info can be used instead which a caller must fill with information (including IPv4 and IPv6 addresses) and pass to setStationInfo? Naturally, getStationInfo would fill such a structure.
  * getPacket only reads in a packet, getPacketSize returns the size of the packet. What happens if, between getPacketSize and getPacket a task switch occurs, and the new thread successfully retrieves a packet?

An alternative solution to this is to continue passing around the packet pointer (allocated when the packet is first added to the queue) until it reaches an "endpoint" (ie, ICMP) where it is freed. This sounds like a great way to introduce memory leaks into the system, though.